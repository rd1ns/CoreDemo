@model EntitiyLayer.Concrete.Writer
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/UserLayout.cshtml";
}

<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@9"></script>
<script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>
<section class="main-content-w3layouts-agileits">
    <div class="container">
        <h3 class="tittle">Kayıt Ol</h3>
        <div class="inner-sec">
            <div class="login p-5 bg-light mx-auto mw-100">
                @using (Html.BeginForm("Index", "Register", FormMethod.Post))
                {

                    <div class="form-row">
                        <div class="col-md-6 mb-3">
                            <label for="validationCustom01">Ad Soyad</label>
                            @Html.TextBoxFor(x => x.WriterName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.WriterName, "", new { @class = "text-danger" })
                            @*<input type="text" class="form-control" id="validationDefault01" name="WriterName" placeholder="" required="">*@
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="validationCustom02">Mail Adresi</label>
                            @Html.TextBoxFor(x => x.WriterMail, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.WriterMail, "", new { @class = "text-danger" })
                            @*<input type="email" class="form-control" name="WriterMail" id="validationDefault02" placeholder="" required="">*@
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="exampleInputPassword1 mb-2">Şifre</label>
                            @Html.TextBoxFor(x => x.WriterPassword, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.WriterPassword, "", new { @class = "text-danger" })
                            @*<input type="password" class="form-control" name="WriterPassword" id="password1" placeholder="" required="">*@
                        </div>
                        <div class="form-group col-md-6">
                            <label for="exampleInputPassword2 mb-2">Görsel Dosya Yolu</label>
                            @Html.TextBoxFor(x => x.WriterImage, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.WriterImage, "", new { @class = "text-danger" })
                            @*<input type="text" class="form-control" name="WriterImage" id="password2" placeholder="" required="">*@
                        </div>

                    </div>
                    @*<button type="submit" class="btn btn-primary submit mb-4">Kayıt Ol</button>*@
                    <button onclick="fireSweetAlert()" type="submit" class="btn btn-primary submit mb-4">Kayıt Ol</button>
                    <script>

                        function fireSweetAlert() {
                            Swal.fire(
                                'Good job!',
                                'You clicked the button!',
                                'success'


                            )
                        }

                    </script>
                    @*<p>
                            <a href="#" id="btn1">Tüm şartları okudum, kabul ediyorum.</a>
                        </p>*@

                }


            </div>
        </div>
    </div>

    <script>
        Swal.fire({
            title: 'Submit your Github username',
            input: 'text',
            inputAttributes: {
                autocapitalize: 'off'
            },
            showCancelButton: true,
            confirmButtonText: 'Look up',
            showLoaderOnConfirm: true,
            preConfirm: (login) => {
                return fetch(`//api.github.com/users/${login}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(response.statusText)
                        }
                        return response.json()
                    })
                    .catch(error => {
                        Swal.showValidationMessage(
                            `Request failed: ${error}`
                        )
                    })
            },
            allowOutsideClick: () => !Swal.isLoading()
        }).then((result) => {
            if (result.isConfirmed) {
                Swal.fire({
                    title: `${result.value.login}'s avatar`,
                    imageUrl: result.value.avatar_url
                })
            }
        })
    </script>


</section>

